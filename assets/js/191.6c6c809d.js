(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{336:function(e,v,_){"use strict";_.r(v);var t=_(0),c=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"高级-6：代码已经-push-上去了才发现写错？"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高级-6：代码已经-push-上去了才发现写错？","aria-hidden":"true"}},[e._v("#")]),e._v(" 高级 6：代码已经 push 上去了才发现写错？")]),_("p",[e._v("有的时候，代码 "),_("code",[e._v("push")]),e._v(" 到了中央仓库，才发现有个 "),_("code",[e._v("commit")]),e._v(" 写错了。这种问题的处理分两种情况：")]),_("h2",{attrs:{id:"_1-出错的内容在你自己的-branch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-出错的内容在你自己的-branch","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. 出错的内容在你自己的 branch")]),_("p",[e._v("假如是某个你自己独立开发的 "),_("code",[e._v("branch")]),e._v(" 出错了，不会影响到其他人，那没关系用前面几节讲的方法把写错的 "),_("code",[e._v("commit")]),e._v(" 修改或者删除掉，然后再 "),_("code",[e._v("push")]),e._v(" 上去就好了。不过……")]),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe2638ac5c1dd0?w=676&h=162&f=jpeg&s=95234",alt:""}})]),_("p",[e._v("由于你在本地对已有的 "),_("code",[e._v("commit")]),e._v(" 做了修改，这时你再 "),_("code",[e._v("push")]),e._v(" 就会失败，因为中央仓库包含本地没有的 "),_("code",[e._v("commit")]),e._v("s。但这个和前面讲过的情况不同，这次的冲突不是因为同事 "),_("code",[e._v("push")]),e._v(" 了新的提交，而是因为你刻意修改了一些内容，这个冲突是你预料到的，你本来就希望用本地的内容覆盖掉中央仓库的内容。那么这时就不要乖乖听话，按照提示去先 "),_("code",[e._v("pull")]),e._v(" 一下再 "),_("code",[e._v("push")]),e._v(" 了，而是要选择「强行」"),_("code",[e._v("push")]),e._v("：")]),_("div",{staticClass:"language-shell extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("git push origin branch1 -f\n")])])]),_("p",[_("code",[e._v("-f")]),e._v(" 是 "),_("code",[e._v("--force")]),e._v(" 的缩写，意为「忽略冲突，强制 "),_("code",[e._v("push")]),e._v("」。")]),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe2638ab7b7e6d?w=507&h=154&f=jpeg&s=74359",alt:""}})]),_("p",[e._v("这样，在本地修改了错误的 "),_("code",[e._v("commit")]),e._v("s，然后强制 "),_("code",[e._v("push")]),e._v(" 上去，问题就解决了。")]),_("h2",{attrs:{id:"_2-出错的内容已经合并到-master"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-出错的内容已经合并到-master","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 出错的内容已经合并到 master")]),_("p",[e._v("这就不能用上面那招了。同事的工作都在 "),_("code",[e._v("master")]),e._v(" 上，你永远不知道你的一次强制 "),_("code",[e._v("push")]),e._v(" 会不会洗掉同事刚发上去的新提交。所以除非你是人员数量和行为都完全可控的超小团队，可以和同事做到无死角的完美沟通，不然一定别在 "),_("code",[e._v("master")]),e._v(" 上强制 "),_("code",[e._v("push")]),e._v("。")]),_("p",[e._v("在这种时候，你只能退一步，选用另一种策略：增加一个新的提交，把之前提交的内容抹掉。例如之前你增加了一行代码，你希望撤销它，那么你就做一个删掉这行代码的提交；如果你删掉了一行代码，你希望撤销它，那么你就做一个把这行代码还原回来的提交。这种事做起来也不算麻烦，因为 Git 有一个对应的指令："),_("code",[e._v("revert")]),e._v("。")]),_("p",[e._v("它的用法很简单，你希望撤销哪个 "),_("code",[e._v("commit")]),e._v("，就把它填在后面：")]),_("div",{staticClass:"language-shell extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v("git revert HEAD^\n")])])]),_("p",[e._v("上面这行代码就会增加一条新的 "),_("code",[e._v("commit")]),e._v("，它的内容和倒数第二个 "),_("code",[e._v("commit")]),e._v(" 是相反的，从而和倒数第二个 "),_("code",[e._v("commit")]),e._v(" 相互抵消，达到撤销的效果。")]),_("p",[e._v("在 "),_("code",[e._v("revert")]),e._v(" 完成之后，把新的 "),_("code",[e._v("commit")]),e._v(" 再 "),_("code",[e._v("push")]),e._v(" 上去，这个 "),_("code",[e._v("commit")]),e._v(" 的内容就被撤销了。它和前面所介绍的撤销方式相比，最主要的区别是，这次改动只是被「反转」了，并没有在历史中消失掉，你的历史中会存在两条 "),_("code",[e._v("commit")]),e._v(" ：一个原始 "),_("code",[e._v("commit")]),e._v(" ，一个对它的反转 "),_("code",[e._v("commit")]),e._v("。")]),_("h2",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[e._v("#")]),e._v(" 小结")]),_("p",[e._v("这节的内容是讲当错误的 "),_("code",[e._v("commit")]),e._v(" 已经被 "),_("code",[e._v("push")]),e._v(" 上去时的解决方案。具体的方案有两类：")]),_("ol",[_("li",[e._v("如果出错内容在私有 "),_("code",[e._v("branch")]),e._v("：在本地把内容修正后，强制 "),_("code",[e._v("push")]),e._v(" ("),_("code",[e._v("push -f")]),e._v("）一次就可以解决；")]),_("li",[e._v("如果出错内容在 "),_("code",[e._v("master")]),e._v("：不要强制 "),_("code",[e._v("push")]),e._v("，而要用 "),_("code",[e._v("revert")]),e._v(" 把写错的 "),_("code",[e._v("commit")]),e._v(" 撤销。")])])])}],!1,null,null,null);v.default=c.exports}}]);