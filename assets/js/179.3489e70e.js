(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{318:function(e,t,v){"use strict";v.r(t);var _=v(0),c=Object(_.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"进阶-3：merge：合并-commits"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进阶-3：merge：合并-commits","aria-hidden":"true"}},[e._v("#")]),e._v(" 进阶 3：merge：合并 commits")]),v("p",[e._v("前面说到，"),v("code",[e._v("pull")]),e._v(" 的内部操作其实是把远程仓库取到本地后（使用的是 "),v("code",[e._v("fetch")]),e._v("），再用一次 "),v("code",[e._v("merge")]),e._v(" 来把远端仓库的新 "),v("code",[e._v("commits")]),e._v(" 合并到本地。这一节就说一下，"),v("code",[e._v("merge")]),e._v(" 到底是什么。")]),v("h2",{attrs:{id:"含义和用法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#含义和用法","aria-hidden":"true"}},[e._v("#")]),e._v(" 含义和用法")]),v("p",[v("code",[e._v("merge")]),e._v(" 的意思是「合并」，它做的事也是合并：指定一个 "),v("code",[e._v("commit")]),e._v("，把它合并到当前的 "),v("code",[e._v("commit")]),e._v(" 来。具体来讲，"),v("code",[e._v("merge")]),e._v(" 做的事是：")]),v("p",[v("strong",[e._v("从目标 "),v("code",[e._v("commit")]),e._v(" 和当前 "),v("code",[e._v("commit")]),e._v(" （即 "),v("code",[e._v("HEAD")]),e._v(" 所指向的 "),v("code",[e._v("commit")]),e._v("）分叉的位置起，把目标 "),v("code",[e._v("commit")]),e._v(" 的路径上的所有 "),v("code",[e._v("commit")]),e._v(" 的内容一并应用到当前 "),v("code",[e._v("commit")]),e._v("，然后自动生成一个新的 "),v("code",[e._v("commit")]),e._v("。")])]),v("p",[e._v("例如下面这个图中：")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2a9c60eca3?w=484&h=457&f=jpeg&s=24531",alt:""}})]),v("p",[v("code",[e._v("HEAD")]),e._v(" 指向了 "),v("code",[e._v("master")]),e._v("，所以如果这时执行：")]),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("git merge branch1\n")])])]),v("p",[e._v("Git 会把 "),v("code",[e._v("5")]),e._v(" 和 "),v("code",[e._v("6")]),e._v(" 这两个 "),v("code",[e._v("commit")]),e._v(" 的内容一并应用到 "),v("code",[e._v("4")]),e._v(" 上，然后生成一个新的提交，并跳转到提交信息填写的界面：")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2aaa2dae15?w=513&h=128&f=jpeg&s=41756",alt:""}})]),v("p",[v("code",[e._v("merge")]),e._v(" 操作会帮你自动地填写简要的提交信息。在提交信息修改完成后（或者你打算不修改默认的提交信息），就可以退出这个界面，然后这次 "),v("code",[e._v("merge")]),e._v(" 就算完成了。")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2aad5a0279?w=640&h=454&f=gif&s=175263",alt:""}})]),v("h2",{attrs:{id:"适用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#适用场景","aria-hidden":"true"}},[e._v("#")]),e._v(" 适用场景")]),v("p",[v("code",[e._v("merge")]),e._v(" 有什么用？最常用的场景有两处：")]),v("ol",[v("li",[v("p",[e._v("合并分支")]),v("p",[e._v("当一个 "),v("code",[e._v("branch")]),e._v(" 的开发已经完成，需要把内容合并回去时，用 "),v("code",[e._v("merge")]),e._v(" 来进行合并。")]),v("blockquote",[v("p",[e._v("那 "),v("code",[e._v("branch")]),e._v(" 又应该怎么用呢？")]),v("p",[e._v("下节就说。")])])]),v("li",[v("p",[v("code",[e._v("pull")]),e._v(" 的内部操作")]),v("p",[e._v("之前说过，"),v("code",[e._v("pull")]),e._v(" 的实际操作其实是把远端仓库的内容用 "),v("code",[e._v("fetch")]),e._v(" 取下来之后，用 "),v("code",[e._v("merge")]),e._v(" 来合并。")])])]),v("h2",{attrs:{id:"特殊情况-1：冲突"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特殊情况-1：冲突","aria-hidden":"true"}},[e._v("#")]),e._v(" 特殊情况 1：冲突")]),v("p",[v("code",[e._v("merge")]),e._v(" 在做合并的时候，是有一定的自动合并能力的：如果一个分支改了 A 文件，另一个分支改了 B 文件，那么合并后就是既改 A 也改 B，这个动作会自动完成；如果两个分支都改了同一个文件，但一个改的是第 1 行，另一个改的是第 2 行，那么合并后就是第 1 行和第 2 行都改，也是自动完成。")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2a9d759d8e?w=660&h=402&f=gif&s=259881",alt:""}})]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2a9c151a4c?w=636&h=418&f=gif&s=584533",alt:""}})]),v("p",[e._v("但，如果两个分支修改了同一部分内容，"),v("code",[e._v("merge")]),e._v(" 的自动算法就搞不定了。这种情况 Git 称之为：冲突（Conflict）。")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2a9c2ce4d3?w=521&h=425&f=jpeg&s=36538",alt:""}})]),v("p",[e._v("直白点说就是，你的两个分支改了相同的内容，Git 不知道应该以哪个为准。如果在 "),v("code",[e._v("merge")]),e._v(" 的时候发生了这种情况，Git 就会把问题交给你来决定。具体地，它会告诉你 "),v("code",[e._v("merge")]),e._v(" 失败，以及失败的原因：")]),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("git merge feature1\n")])])]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2af3e40342?w=539&h=80&f=jpeg&s=40925",alt:""}})]),v("p",[e._v("提示信息说，在 "),v("code",[e._v("shopping list.txt")]),e._v(' 中出现了 "merge conflict"，自动合并失败，要求 "fix conflicts and then commit the result"（把冲突解决掉后提交）。那么你现在需要做两件事：')]),v("ol",[v("li",[e._v("解决掉冲突")]),v("li",[e._v("手动 "),v("code",[e._v("commit")]),e._v(" 一下")])]),v("h3",{attrs:{id:"_1-解决冲突"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-解决冲突","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. 解决冲突")]),v("p",[e._v("解决掉冲突的方式有多个，我现在说最直接的一个。你现在再打开 "),v("code",[e._v("shopping list.txt")]),e._v(" 看一下，会发现它的内容变了：")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2af5b06ef6?w=180&h=158&f=jpeg&s=21719",alt:""}})]),v("p",[e._v("可以看到，Git 虽然没有帮你完成自动 "),v("code",[e._v("merge")]),e._v("，但它对文件还是做了一些工作：它把两个分支冲突的内容放在了一起，并用符号标记出了它们的边界以及它们的出处。上面图中表示，"),v("code",[e._v("HEAD")]),e._v(" 中的内容是 "),v("code",[e._v("移动硬盘（已买）")]),e._v("，而 "),v("code",[e._v("feature1")]),e._v(" 中的内容则是 "),v("code",[e._v("移动硬盘（不买了）")]),e._v("。这两个改动 Git 不知道应该怎样合并，于是把它们放在一起，由你来决定。假设你决定保留 "),v("code",[e._v("HEAD")]),e._v(" 的修改，那么只要删除掉 "),v("code",[e._v("feature1")]),e._v(" 的修改，再把 Git 添加的那三行 "),v("code",[e._v("<<<")]),v("code",[e._v("===")]),v("code",[e._v(">>>")]),e._v(" 辅助文字也删掉，保存文件退出，所谓的「解决掉冲突」就完成了。")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2affe97f50?w=146&h=79&f=jpeg&s=11799",alt:""}})]),v("p",[e._v("你也可以选择使用更方便的 "),v("code",[e._v("merge")]),e._v(" 工具来解决冲突，这个你可以自己搜索一下。")]),v("h3",{attrs:{id:"_2-手动提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-手动提交","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 手动提交")]),v("p",[e._v("解决完冲突以后，就可以进行第二步—— "),v("code",[e._v("commit")]),e._v(" 了。")]),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("git add shopping\\ list.txt # 嗯是的，这里 commit 前也需要先 add 一下\ngit commit\n")])])]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe4388f6a15ebe?w=420&h=186&f=jpeg&s=24027",alt:""}})]),v("p",[e._v("可以看到，被冲突中断的 "),v("code",[e._v("merge")]),e._v("，在手动 "),v("code",[e._v("commit")]),e._v(" 的时候依然会自动填写提交信息。这是因为在发生冲突后，Git 仓库处于一个「merge 冲突待解决」的中间状态，在这种状态下 "),v("code",[e._v("commit")]),e._v("，Git 就会自动地帮你添加「这是一个 merge commit」的提交信息。")]),v("h3",{attrs:{id:"放弃解决冲突，取消-merge？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#放弃解决冲突，取消-merge？","aria-hidden":"true"}},[e._v("#")]),e._v(" 放弃解决冲突，取消 merge？")]),v("p",[e._v("同理，由于现在 Git 仓库处于冲突待解决的中间状态，所以如果你最终决定放弃这次 "),v("code",[e._v("merge")]),e._v("，也需要执行一次 "),v("code",[e._v("merge --abort")]),e._v(" 来手动取消它：")]),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("git merge --abort\n")])])]),v("p",[e._v("输入这行代码，你的 Git 仓库就会回到 "),v("code",[e._v("merge")]),e._v(" 前的状态。")]),v("h2",{attrs:{id:"特殊情况-2：head-领先于目标-commit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特殊情况-2：head-领先于目标-commit","aria-hidden":"true"}},[e._v("#")]),e._v(" 特殊情况 2：HEAD 领先于目标 commit")]),v("p",[e._v("如果 "),v("code",[e._v("merge")]),e._v(" 时的目标 "),v("code",[e._v("commit")]),e._v(" 和 "),v("code",[e._v("HEAD")]),e._v(" 处的 "),v("code",[e._v("commit")]),e._v(" 并不存在分叉，而是 "),v("code",[e._v("HEAD")]),e._v(" 领先于目标 "),v("code",[e._v("commit")]),e._v("：")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2b2357b9d9?w=361&h=378&f=jpeg&s=20330",alt:""}})]),v("p",[e._v("那么 "),v("code",[e._v("merge")]),e._v(" 就没必要再创建一个新的 "),v("code",[e._v("commit")]),e._v(" 来进行合并操作，因为并没有什么需要合并的。在这种情况下， Git 什么也不会做，"),v("code",[e._v("merge")]),e._v(" 是一个空操作。")]),v("h2",{attrs:{id:"特殊情况-3：head-落后于-目标-commit——fast-forward"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#特殊情况-3：head-落后于-目标-commit——fast-forward","aria-hidden":"true"}},[e._v("#")]),e._v(" 特殊情况 3：HEAD 落后于 目标 commit——fast-forward")]),v("p",[e._v("而另一种情况：如果 "),v("code",[e._v("HEAD")]),e._v(" 和目标 "),v("code",[e._v("commit")]),e._v(" 依然是不存在分叉，但 "),v("code",[e._v("HEAD")]),e._v(" 不是领先于目标 "),v("code",[e._v("commit")]),e._v("，而是落后于目标 "),v("code",[e._v("commit")]),e._v("：")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2b0913daf4?w=467&h=369&f=jpeg&s=20061",alt:""}})]),v("p",[e._v("那么 Git 会直接把 "),v("code",[e._v("HEAD")]),e._v("（以及它所指向的 "),v("code",[e._v("branch")]),e._v("，如果有的话）移动到目标 "),v("code",[e._v("commit")]),e._v("：")]),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("git merge feature1\n")])])]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2b2486758a?w=494&h=376&f=gif&s=113911",alt:""}})]),v("p",[e._v('这种操作有一个专有称谓，叫做 "fast-forward"（快速前移）。')]),v("p",[e._v("一般情况下，创建新的 "),v("code",[e._v("branch")]),e._v(" 都是会和原 "),v("code",[e._v("branch")]),e._v(" （例如上图中的 "),v("code",[e._v("master")]),e._v(" ）并行开发的，不然没必要开 "),v("code",[e._v("branch")]),e._v(" ，直接在原 "),v("code",[e._v("branch")]),e._v(" 上开发就好。但事实上，上图中的情形其实很常见，因为这其实是 "),v("code",[e._v("pull")]),e._v(" 操作的一种经典情形：本地的 "),v("code",[e._v("master")]),e._v(" 没有新提交，而远端仓库中有同事提交了新内容到 "),v("code",[e._v("master")]),e._v("：")]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2b2f15e16f?w=518&h=640&f=jpeg&s=38371",alt:""}})]),v("p",[e._v("那么这时如果在本地执行一次 "),v("code",[e._v("pull")]),e._v(" 操作，就会由于 "),v("code",[e._v("HEAD")]),e._v(" 落后于目标 "),v("code",[e._v("commit")]),e._v(" （也就是远端的 "),v("code",[e._v("master")]),e._v('）而造成 "fast-forward"：')]),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("git pull\n")])])]),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/21/15fddc2b46c69d46?w=572&h=858&f=gif&s=412287",alt:""}})]),v("p",[e._v("简单解释一下上图中的 "),v("code",[e._v("origin/master")]),e._v(" 和 "),v("code",[e._v("origin/HEAD")]),e._v(" 是什么鬼：它们是对远端仓库的 "),v("code",[e._v("master")]),e._v(" 和 "),v("code",[e._v("HEAD")]),e._v(" 的本地镜像，在 "),v("code",[e._v("git pull")]),e._v(" 的「两步走」中的第一步——"),v("code",[e._v("git fetch")]),e._v(" 下载远端仓库内容时，这两个镜像引用得到了更新，也就是上面这个动图中的第一步："),v("code",[e._v("origin/master")]),e._v(" 和 "),v("code",[e._v("origin/HEAD")]),e._v(" 移动到了最新的 "),v("code",[e._v("commit")]),e._v("。")]),v("blockquote",[v("p",[e._v("为什么前面的图里面从来都没有这两个「镜像引用」？因为我没有画呀！其实它们是一直存在的。")])]),v("p",[e._v("而 "),v("code",[e._v("git pull")]),e._v(" 的第二步操作 "),v("code",[e._v("merge")]),e._v(" 的目标 "),v("code",[e._v("commit")]),e._v(" ，是远端仓库的 "),v("code",[e._v("HEAD")]),e._v("，也就是 "),v("code",[e._v("origin/HEAD")]),e._v(" ，所以 "),v("code",[e._v("git pull")]),e._v(" 的第二步的完整内容是：")]),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("git merge origin/HEAD\n")])])]),v("p",[e._v("因此 "),v("code",[e._v("HEAD")]),e._v(" 就会带着 "),v("code",[e._v("master")]),e._v(" 一起，也指向图中绿色的最新 "),v("code",[e._v("commit")]),e._v(" 了。")]),v("h2",{attrs:{id:"小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[e._v("#")]),e._v(" 小结")]),v("p",[e._v("本节对 "),v("code",[e._v("merge")]),e._v(" 进行了介绍，内容大概有这么几点：")]),v("ol",[v("li",[v("code",[e._v("merge")]),e._v(" 的含义：从两个 "),v("code",[e._v("commit")]),e._v("「分叉」的位置起，把目标 "),v("code",[e._v("commit")]),e._v(" 的内容应用到当前 "),v("code",[e._v("commit")]),e._v("（"),v("code",[e._v("HEAD")]),e._v(" 所指向的 "),v("code",[e._v("commit")]),e._v("），并生成一个新的 "),v("code",[e._v("commit")]),e._v("；")]),v("li",[v("code",[e._v("merge")]),e._v(" 的适用场景：\n"),v("ol",[v("li",[e._v("单独开发的 "),v("code",[e._v("branch")]),e._v(" 用完了以后，合并回原先的 "),v("code",[e._v("branch")]),e._v("；")]),v("li",[v("code",[e._v("git pull")]),e._v("  的内部自动操作。")])])]),v("li",[v("code",[e._v("merge")]),e._v(" 的三种特殊情况：\n"),v("ol",[v("li",[e._v("冲突\n"),v("ol",[v("li",[e._v("原因：当前分支和目标分支修改了同一部分内容，Git 无法确定应该怎样合并；")]),v("li",[e._v("应对方法：解决冲突后手动 "),v("code",[e._v("commit")]),e._v("。")])])]),v("li",[v("code",[e._v("HEAD")]),e._v(" 领先于目标 "),v("code",[e._v("commit")]),e._v("：Git 什么也不做，空操作；")]),v("li",[v("code",[e._v("HEAD")]),e._v(" 落后于目标 "),v("code",[e._v("commit")]),e._v("：fast-forward。")])])])])])}],!1,null,null,null);t.default=c.exports}}]);