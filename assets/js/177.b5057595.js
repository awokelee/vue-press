(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{315:function(t,a,e){"use strict";e.r(a);var s=e(0),d=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"进阶-5：关于-add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进阶-5：关于-add","aria-hidden":"true"}},[t._v("#")]),t._v(" 进阶 5：关于 add")]),e("p",[t._v("前面说过了可以通过 "),e("code",[t._v("add")]),t._v(" 来把改动的内容放进暂存区。这一节关于 "),e("code",[t._v("add")]),t._v(" 再多说两点。都是基础的东西，但对新学 Git 的人可能有些用处。")]),e("h2",{attrs:{id:"_1-add-后面加个点-：全部暂存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-add-后面加个点-：全部暂存","aria-hidden":"true"}},[t._v("#")]),t._v(' 1. add 后面加个点 "."：全部暂存')]),e("p",[e("code",[t._v("add")]),t._v(" 指令除了 "),e("code",[t._v("git add 文件名")]),t._v(" 这种用法外，还可以使用 "),e("code",[t._v("add .")]),t._v(" 来直接把工作目录下的所有改动全部放进暂存区：")]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git status\n")])])]),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ee159b2e?w=623&h=341&f=jpeg&s=82623",alt:""}})]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add .\ngit status\n")])])]),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ed623762?w=383&h=183&f=jpeg&s=46814",alt:""}})]),e("p",[t._v("这个用法没什么特别的好处，但就一个字：方便（咦？）。你在用的时候会更加深刻地体会到。")]),e("h2",{attrs:{id:"_2-add-添加的是文件改动，而不是文件名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-add-添加的是文件改动，而不是文件名","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. add 添加的是文件改动，而不是文件名")]),e("p",[t._v("假如你修改了文件 "),e("code",[t._v("a.txt")]),t._v("，然后把它 "),e("code",[t._v("add")]),t._v(" 进了暂存区：")]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add a.txt\ngit status\n")])])]),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ee50d1a6?w=386&h=149&f=jpeg&s=40273",alt:""}})]),e("p",[t._v("然后你又往 "),e("code",[t._v("a.txt")]),t._v(" 里写了几行东西。这时候你再 "),e("code",[t._v("status")]),t._v(" 一下的话：")]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git status\n")])])]),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/11/22/15fe36e3ed9f9877?w=618&h=221&f=jpeg&s=56939",alt:""}})]),e("p",[t._v("你会发现你的 "),e("code",[t._v("a.txt")]),t._v(' 既在 "Changes to be commited" 的暂存区，又在 "Changes not staged for commit"。不用觉得奇怪，这是因为通过 '),e("code",[t._v("add")]),t._v(" 添加进暂存区的不是文件名，而是具体的文件改动内容。你在 "),e("code",[t._v("add")]),t._v(" 时的改动都被添加进了暂存区，但在 "),e("code",[t._v("add")]),t._v(" 之后的新改动并不会自动被添加进暂存区。在这时如果你提交：")]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit\n")])])]),e("p",[t._v("那么你那些新的改动是不会被提交的。")]),e("p",[t._v("这种逻辑也许会让新学 Git 的人有点困惑和感到麻烦，但当你使用 Git 一段时间后，你会发现这种设计很巧妙，而且不但不麻烦，还很方便。具体的原因我就不长篇大论地说了，你以后慢慢体会吧。")])])}],!1,null,null,null);a.default=d.exports}}]);