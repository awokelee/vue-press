(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{216:function(t,e,n){"use strict";n.r(e);var r=n(0),s=Object(r.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"前端工作面试-js-相关问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端工作面试-js-相关问题","aria-hidden":"true"}},[t._v("#")]),n("a",{attrs:{href:"https://github.com/darcyclarke/Front-end-Developer-Interview-Questions#js",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端工作面试 JS 相关问题"),n("OutboundLink")],1)]),n("ul",[n("li",[n("p",[t._v("Q：解释下事件代理。")]),n("p",[t._v("A: 当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。这主要得益于浏览器的事件冒泡机制。")]),t._m(0),n("p",[t._v("相关阅读：")]),n("ul",[n("li",[n("a",{attrs:{href:"http://www.cnblogs.com/owenChen/archive/2013/02/18/2915521.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript事件代理和委托（Delegation）"),n("OutboundLink")],1)]),n("li",[n("a",{attrs:{href:"http://www.cnblogs.com/owenChen/archive/2013/02/18/2915521.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("事件代理"),n("OutboundLink")],1)]),n("li",[n("a",{attrs:{href:"http://tangram.baidu.com/article/138",target:"_blank",rel:"noopener noreferrer"}},[t._v("事件代理的应用"),n("OutboundLink")],1)])])]),n("li",[t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),n("p",[t._v("参考阅读：")]),n("ul",[n("li",[n("a",{attrs:{href:"http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/#ibm-pcon",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出 JavaScript 中的 this"),n("OutboundLink")],1)]),n("li",[n("a",{attrs:{href:"http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this",target:"_blank",rel:"noopener noreferrer"}},[t._v("this 的工作原理"),n("OutboundLink")],1)])])]),n("li",[n("p",[t._v("Q: 解释下原型继承的原理。")]),n("p",[t._v("A:原型继承的基础是原型链查找。\n原型链查找基本概念：")]),t._m(6),n("p",[t._v("参考：")]),n("ul",[n("li",[n("a",{attrs:{href:"http://www.jianshu.com/p/d2742610ec30#",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解javascript原型继承"),n("OutboundLink")],1)]),n("li",[n("a",{attrs:{href:"http://www.ituring.com.cn/article/56184",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript原型继承工作原理"),n("OutboundLink")],1)]),n("li",[n("a",{attrs:{href:"http://javascript.crockford.com/prototypal.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prototypal Inheritance in JavaScript"),n("OutboundLink")],1)])])]),t._m(7),n("li",[n("p",[t._v("A: AMD vs. CommonJS？")]),n("p",[t._v("Q: 可参考: "),n("a",{attrs:{href:"http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs"),n("OutboundLink")],1)])]),t._m(8),n("li",[t._m(9),t._m(10),n("p",[t._v("A: 可参考 "),n("a",{attrs:{href:"http://roshanca.com/2014/web-develop-styleguide-javascript/",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端编码风格规范之 JavaScript 规范"),n("OutboundLink")],1)]),n("p",[t._v("总是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，用以创建独立隔绝的定义域。这一举措可防止全局命名空间被污染。")]),n("p",[t._v("IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。")]),n("p",[t._v("不推荐")]),t._m(11),n("p",[t._v("推荐")]),t._m(12),n("p",[t._v("IIFE（立即执行的函数表达式）:无论何时，想要创建一个新的封闭的定义域，那就用 IIFE。它不仅避免了干扰，也使得内存在执行完后立即释放。")]),n("p",[t._v("所有脚本文件建议都从 IIFE 开始。")]),n("p",[t._v("立即执行的函数表达式的执行括号应该写在外包括号内。虽然写在内还是写在外都是有效的，但写在内使得整个表达式看起来更像一个整体，因此推荐这么做。")]),n("p",[t._v("不推荐")]),t._m(13),n("p",[t._v("推荐")]),t._m(14),n("p",[t._v("so，用下列写法来格式化你的 IIFE 代码：")]),t._m(15),n("p",[t._v("如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：")]),t._m(16)]),n("li",[t._m(17),t._m(18),t._m(19),t._m(20),n("p",[t._v("待修改。")]),n("ul",[n("li",[n("a",{attrs:{href:"http://stackoverflow.com/questions/6429225/javascript-null-or-undefined",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://stackoverflow.com/questions/6429225/javascript-null-or-undefined"),n("OutboundLink")],1)]),n("li",[n("a",{attrs:{href:"http://www.zhihu.com/question/19966545",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.zhihu.com/question/19966545"),n("OutboundLink")],1)])])]),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),n("li",[t._m(27),n("p",[t._v("A: "),n("a",{attrs:{href:"http://www.cnblogs.com/fighting_cp/archive/2010/09/20/1831844.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于javascript中apply()和call()方法的区别"),n("OutboundLink")],1)])]),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),n("li",[n("p",[t._v("请尽可能详尽的解释 AJAX 的工作原理。")]),n("p",[t._v("Q: Ajax 全称为 Asynchronous JavaScript and XML（异步 JavaScript 和 XML），是一种创建交互式网页应用的网页开发技术。\nAjax 的原理简单来说通过 XmlHttpRequest 对象来向服务器发异步请求，从服务器获得数据，然后用 JavaScript来操作 DOM 而更新页面。这其中最关键的一步就是从服务器获得请求数据。")]),n("p",[t._v("以往我们浏览网页的原理是由 Client 向 Server 提交页面申请，再由 Server 将申请通过 HTTP 传回给 Client 生成浏览页面：")]),t._m(33),n("p",[t._v("使用 Ajax 后的工作原理如下图，可见通过 Ajax 在用户交互方面有了很大改进，用户可以不用为提交了 Form 而长时间等待服务器应答，而且通过 Ajax 也可以开发出华丽的 Web 交互页面。")]),t._m(34),n("p",[t._v("转自："),n("a",{attrs:{href:"https://github.com/infp/Front-end-Interview/blob/master/source/javascript.md#21%E8%AF%B7%E5%B0%BD%E5%8F%AF%E8%83%BD%E8%AF%A6%E5%B0%BD%E7%9A%84%E8%A7%A3%E9%87%8A-ajax-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[t._v("AJAX 的工作原理"),n("OutboundLink")],1)])]),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),n("li",[t._m(43),n("p",[t._v("A: "),n("code",[t._v("==")]),t._v("（相等运算法），"),n("code",[t._v("===")]),t._v("（严格相等运算符） JavaScript 对象的比较是引用的比较，非值的比较，对象和其本身相等，和其他任何对象不相等。 "),n("code",[t._v("===")]),t._v(" 首先计算其操作数的值，然后比较，比较过程无任何类型转换。 "),n("code",[t._v("==")]),t._v(" 如果两个操作数不是同一类型的，则相等运算符进行一些类型转换进行比较。 "),n("code",[t._v("==")]),t._v(" 这里截取 "),n("a",{attrs:{href:"http://dorey.github.io/JavaScript-Equality-Table",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 相等表格"),n("OutboundLink")],1),t._v("上的的两张图片让大家更为直观的感受下。")]),t._m(44),t._m(45),n("p",[t._v("引用下"),n("a",{attrs:{href:"http://weibo.com/wintercn",target:"_blank",rel:"noopener noreferrer"}},[t._v("温特大大"),n("OutboundLink")],1),t._v("的总结就是："),t._m(46),t._v("。")])]),t._m(47),t._m(48),t._m(49),t._m(50)]),t._m(51),t._m(52)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("  var delegate = function(client, clientMethod) {\n      return function() {\n          return clientMethod.apply(client, arguments);\n      }\n  }\n\n  var agentMethod = delegate (client, clientMethod);\n  agentMethod();\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Q: 解释下 JavaScript 中 "),e("code",[this._v("this")]),this._v(" 是如何工作的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("A: "),e("code",[this._v("this")]),this._v(" 在 JavaScript 中主要由以下五种使用场景。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("作为函数调用，"),e("code",[this._v("this")]),this._v(" 绑定全局对象，浏览器环境全局对象为 window 。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("内部函数内部函数的 "),e("code",[this._v("this")]),this._v(" 也绑定全局对象，应该绑定到其外层函数对应的对象上，这是 JavaScript的缺陷，用"),e("code",[this._v("that")]),this._v("替换。")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("作为构造函数使用，"),n("code",[t._v("this")]),t._v(" 绑定到新创建的对象。")]),n("li",[t._v("作为对象方法使用，"),n("code",[t._v("this")]),t._v(" 绑定到该对象。")]),n("li",[t._v("使用"),n("code",[t._v("apply")]),t._v("或"),n("code",[t._v("call")]),t._v("调用 "),n("code",[t._v("this")]),t._v(" 将会被显式设置为函数调用的第一个参数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("每一个函数 F 都有一个原型对象（prototype）F.prototype")]),e("li",[this._v("每一个函数都可以通过 new 关键字化身成为一个类构造函数，new F 会产生一个对象 O")]),e("li",[this._v("在调用对象的某个属性或者方法，比如 http://O.xxx 的时候，会首先查找对象自身是否有这个方法或者属性，如果没找到就会去对象的构造函数的原型对象中查找（注意有两个定语），也就是查找 O 的构造函数 F 的原型对象 http://F.prototype.xxx")]),e("li",[this._v("F.prototype 也是一个对象，查找 http://F.prototype.xxx 的时候会重复第 3 步的过程")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("Q: 你是如何测试JavaScript代码的？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("Q: 什么是哈希表？")]),e("p",[this._v("A: 哈希表是根据关键字（Key value）而直接访问在内存存储位置的数据结构。也就是说，它通过把键值通过一个函数的计算，映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Q: 解释下为什么接下来这段代码不是 IIFE(立即调用的函数表达式)："),e("code",[this._v("function foo(){ }();")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("要做哪些改动使它变成 IIFE?")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("var x = 10,\n    y = 100;\n\n// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this\n// will be stored in the window object. This is very unclean and needs to be avoided.\nconsole.log(window.x + ' ' + window.y);\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// We declare a IIFE and pass parameters into the function that we will use from the global space\n(function(log, w, undefined){\n  'use strict';\n\n  var x = 10,\n      y = 100;\n\n  // Will output 'true true'\n  log((w.x === undefined) + ' ' + (w.y === undefined));\n\n}(window.console.log, window));\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("(function(){})();\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("(function(){}());\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("(function(){\n  'use strict';\n\n  // Code goes here\n\n}());\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("(function($, w, d){\n  'use strict';\n\n  $(function() {\n    w.alert(d.querySelectorAll('div').length);\n  });\n}(jQuery, window, document));\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Q: 描述以下变量的区别："),e("code",[this._v("null")]),this._v("，"),e("code",[this._v("undefined")]),this._v(" 或 "),e("code",[this._v("undeclared")]),this._v("？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("该如何检测它们？")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("A: "),n("code",[t._v("undefined")]),t._v("是Js语言类型，而"),n("code",[t._v("undeclared")]),t._v("是一种Js语法错误。在JavaScript中，有两个表示‘空’的值"),n("code",[t._v("undefined")]),t._v("和"),n("code",[t._v("null")]),t._v("，"),n("code",[t._v("undefined")]),t._v("是一个值为"),n("code",[t._v("undefined")]),t._v(" 的类型。JavaScript语言也定义了一个全局变量，它的值是 "),n("code",[t._v("undefined")]),t._v("，这个变量也被称为"),n("code",[t._v("undefined")]),t._v("。 但是这个变量不是一个常量，也不是一个关键字。这意味着它的值可以轻易被覆盖。为了避免可能对"),n("code",[t._v("undefined")]),t._v("值的改变，一个常用的技巧是使用一个传递到匿名包装器的额外参数。在调用时，这个参数不会获取任何值。如下例子：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("  var undefined = 123;\n  (function(something, foo, undefined) {\n  // 局部作用域里的 undefined 变量重新获得了 `undefined` 值\n  })('Hello World', 42);\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("什么是闭包，如何使用它，为什么要使用它？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请举出一个匿名函数的典型用例？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("解释 “JavaScript 模块模式” 以及你在何时使用它。")]),e("ul",[e("li",[this._v("如果有提到无污染的命名空间，可以考虑加分。")]),e("li",[this._v("如果你的模块没有自己的命名空间会怎么样？")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("Q: 请指出 JavaScript 宿主对象和原生对象的区别？")]),e("p",[this._v("A: 宿主对象是指DOM和BOM。原生对象是Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、Math等对象。")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("li",[n("p",[t._v("Q:指出下列代码的区别：")]),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Person")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Person")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("A: 第一行是定义了一个函数 Person()；第二行代码是执行函数 Person() 并将其返回值复制给变量 person，如果 Person() 是一个构造器函数的话，新的对象将不会被创建，并且 this 将被绑定到全局对象上；第三行代码是用构造函数 Person() 构造一个实例对象 person。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Q:"),e("code",[this._v(".call")]),this._v(" 和 "),e("code",[this._v(".apply")]),this._v(" 的区别是什么？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请解释 "),e("code",[this._v("Function.prototype.bind")]),this._v(" 的作用？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("你何时优化自己的代码？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("你能解释一下 JavaScript 中的继承是如何工作的吗？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("在什么时候你会使用 "),e("code",[this._v("document.write()")]),this._v("？")]),e("ul",[e("li",[this._v("大多数生成的广告代码依旧使用 "),e("code",[this._v("document.write()")]),this._v("，虽然这种用法会让人很不爽。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请指出浏览器特性检测，特性推断和浏览器 UA 字符串嗅探的区别？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://yianbin.qiniudn.com/fe-ajax-a.png",alt:"Ajax 原理图"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://yianbin.qiniudn.com/fe-ajax-b.png",alt:"Ajax 原理图"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请解释 JSONP 的工作原理，以及它为什么不是真正的 AJAX。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("你使用过 JavaScript 模板系统吗？")]),e("ul",[e("li",[this._v("如有使用过，请谈谈你都使用过哪些库，比如 Mustache.js，Handlebars 等等。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请解释变量声明提升。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请描述下事件冒泡机制。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v('"attribute" 和 "property" 的区别是什么？')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("为什么扩展 JavaScript 内置对象不是好的做法？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("为什么扩展 JavaScript 内置对象是好的做法？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请指出 document load 和 document ready 两个事件的区别。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Q: "),e("code",[this._v("==")]),this._v(" 和 "),e("code",[this._v("===")]),this._v(" 有什么不同？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://paddingme.qiniudn.com/1396461120383-2.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://paddingme.qiniudn.com/1396464279990-1.png",alt:""}})])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("strong",[t._v("只要记住 "),n("code",[t._v("null")]),t._v(" 只和"),n("code",[t._v("undefined")]),t._v(" 相等，有 "),n("code",[t._v("number")]),t._v(" 都转 "),n("code",[t._v("number")]),t._v("，有 "),n("code",[t._v("boolean")]),t._v(" 也转 "),n("code",[t._v("number")]),t._v("，有 "),n("code",[t._v("string")]),t._v(" 都转 "),n("code",[t._v("string")]),t._v("，对象互相不等，"),n("code",[t._v("NaN")]),t._v(" 互相不等就可以了")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("你如何从浏览器的 URL 中获取查询字符串参数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请解释一下 JavaScript 的同源策略。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("请描述一下 JavaScript 的继承模式。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("如何实现下列代码：")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("4")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{attrs:{class:"token number"}},[t._v("5")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("duplicator")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// [1,2,3,4,5,1,2,3,4,5]")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("描述一种 JavaScript 中实现 memoization(避免重复运算)的策略。")])]),e("li",[e("p",[this._v("什么是三元表达式？“三元” 表示什么意思？")])]),e("li",[e("p",[this._v("函数的参数元是什么？")])]),e("li",[e("p",[this._v("什么是 "),e("code",[this._v('"use strict";')]),this._v(" ? 使用它的好处和坏处分别是什么？")])])])}],!1,null,null,null);e.default=s.exports}}]);